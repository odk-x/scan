/**************************************************************************************************
 GRADLE CONFIG
 *************************************************************************************************/

if ((new File(gradle.local)).exists()) {
    apply from: gradle.local
} else {
    apply from: gradle.remote
}

applicationScripts.each {
    apply from: it
}

apply plugin: 'com.android.application'

android {
    // The following are set in the common.gradle file
    compileSdkVersion(20)
    buildToolsVersion(buildTools)

    defaultConfig {
        applicationId(groupId + scanName)
        minSdkVersion(minVersion)
        targetSdkVersion(targetVersion)
        versionCode(releaseVersionCode)
        versionName(versionCodeName)

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled(minify)
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
        snapshot {
            // Build type for snapshots
        }
        debug {
            testCoverageEnabled(testCoverage) // Allows AndroidTest JaCoCo reports to be generated
        }
    }

    packagingOptions { // Pick first occurrence of any files that cause conflicts, as defined in common.gradle
        packageList.each {
            pickFirst it
        }
    }

    compileOptions {
        sourceCompatibility javaVersion
        targetCompatibility javaVersion
    }
}

configurations.all {
  resolutionStrategy {
    cacheDynamicVersionsFor(0, 'seconds')
    cacheChangingModulesFor(0, 'seconds')
  }
  transitive = true
}


dependencies {
    compile fileTree(include: '*.jar', dir: 'libs')

    if (libraryProjectPath.exists() && gradle.useLocal) { // Local project is favoured
        compile project(libraryProjectName)
    } else {
        releaseCompile(group: groupId, name: libraryArtifactName,
                version: libraryRelease, ext: 'aar')
        snapshotCompile(group: groupId, name: libraryArtifactName,
                version: (useLatestLibrary ? latestVersion : librarySnapshot), ext: 'aar')
        debugCompile(group: groupId, name: libraryArtifactName,
                version: (useLatestLibrary ? latestVersion : librarySnapshot), ext: 'aar')
    }

    if (commonProjectPath.exists() && gradle.useLocal) { // Local project is favoured
        compile project(commonProjectName)
    } else {
        releaseCompile(group: groupId, name: commonArtifactName,
                version: commonRelease, ext: 'aar')
        snapshotCompile(group: groupId, name: commonArtifactName,
                version: (useLatestCommon ? latestVersion : commonSnapshot), ext: 'aar')
        debugCompile(group: groupId, name: commonArtifactName,
                version: (useLatestCommon ? latestVersion : commonSnapshot), ext: 'aar')
    }

    if (playServicesPath.exists() && gradle.useLocal) { // Local project is favoured
        compile project(playServicesName)
    } else {
        releaseCompile(group: groupId, name: playServicesArtifactName,
                version: playServicesRelease, ext: 'aar')
        snapshotCompile(group: groupId, name: playServicesArtifactName,
                version: (useLatestPlayServices ? latestVersion : playServicesSnapshot), ext: 'aar')
        debugCompile(group: groupId, name: playServicesArtifactName,
                version: (useLatestPlayServices ? latestVersion : playServicesSnapshot), ext: 'aar')
    }

    androidTestCompile 'junit:junit:4.12'
    testCompile 'junit:junit:4.12'

    //for Espresso
    androidTestCompile 'com.android.support.test:runner:0.4.1'
    androidTestCompile 'com.android.support.test:rules:0.4.1'
    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.1'
    androidTestCompile 'com.android.support.test.espresso:espresso-intents:2.2.1'
}
